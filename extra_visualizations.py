# -*- coding: utf-8 -*-
"""Extra Visualizations

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jV9TNanX_xUp10wqMtv3IJJ4dwZVBJRY

For the following visualizations, they are of each data set's top 20 countries which include a bar chart and a pie graph (all fromn the 2008 year and the total medals won column), they tell us things such as the US and USSR/Russia having the most medals because of their rivalry in the Cold War, and Inida and China have the largest populations, etc.
"""

import pandas as pd
import numpy as np
import statsmodels.api as sm
import statsmodels.formula.api as smf
import statsmodels.graphics.api as smg
import matplotlib.pyplot as plt


medals = pd.read_csv('Summer-Olympic-medals-1976-to-2008.csv', encoding='latin-1')
medals['Medal'] = medals['Medal'].replace({'Bronze': 1, 'Silver': 2, 'Gold': 3}) #medal weights with 3 being gold, 2 silver, 1 bronze
medals.drop_duplicates(subset=['Year', 'Sport', 'Event', 'Country'], keep='first', inplace=True)
medals = medals.drop(['City', 'Sport', 'Discipline', 'Event', 'Athlete', 'Gender', 'Event_gender', 'Country_Code'], axis=1)
medals = medals.groupby(['Year', 'Country']).sum().reset_index() #Combine rows where Year and Country are the same
medals = medals.pivot_table(index='Country', columns='Year', values='Medal', fill_value=0)
medals.columns = medals.columns.astype(int)
medals.columns = [str(col) + 'medals' for col in medals.columns]
medals['Total'] = medals.sum(axis=1) # Add a column named 'Total' that is the sum of the other 'medals' columns

gdp_pc = pd.read_csv('gdp_per_capita.csv', encoding='latin-1')
gdp_pc.rename(columns={'Country Name': 'Country'}, inplace=True)
gdp_pc = gdp_pc.drop('Code', axis=1)
gdp_pc_medals = pd.merge(gdp_pc, medals, on='Country') # Merge gdp_pc and medals dataframes on 'Country' column
gdp_pc_medals = gdp_pc_medals.fillna(np.nan)

years = range(1976, 2009, 4)  # Generate a list of years every 4 years between 1976 and 2008
years1990 = range(1992, 2009, 4)

# GDPpc regression for each year
for year in years:
    x = gdp_pc_medals[str(year)]
    y = gdp_pc_medals[str(year) + 'medals']
    model = smf.ols(f"y ~ x", gdp_pc_medals)
    result = model.fit()
    print(f"GDPpc regression for {year}:")
    print(result.summary())


hdi = pd.read_csv('HDI.csv', encoding='latin-1')
hdi = hdi.replace('..', np.nan)
hdi_medals = pd.merge(hdi, medals, on='Country')  # Merge hdi and medals dataframes on 'Country' column
hdi_medals = hdi_medals.fillna(np.nan)
hdi_medals[hdi_medals.columns[2:]] = hdi_medals[hdi_medals.columns[2:]].astype(float)

# HDI regression for each year
for year in years1990:
    x = hdi_medals[str(year)]
    y = hdi_medals[str(year) + 'medals']
    model = smf.ols(f"y ~ x", hdi_medals)
    result = model.fit()
    print(f"HDI regression for {year}:")
    print(result.summary())

population = pd.read_csv('world_population.csv', encoding='latin-1')

# 2008 population bar chart
population2008_sorted = population.sort_values(by='2008', ascending=False)
top_10 = population2008_sorted.iloc[1:11]
plt.bar(top_10['Country'], top_10['2008'])
plt.title("Top 10 Populations in 2008")
plt.xlabel('Country')
plt.ylabel('Population')
plt.xticks(rotation=45)
plt.show()

pop_medals = pd.merge(population, medals, on='Country')  # Merge population and medals dataframes on 'Country' column

# Population regression for each year
for year in years:
    x = pop_medals[str(year)]
    y = pop_medals[str(year) + 'medals']
    model = smf.ols(f"y ~ x", pop_medals)
    result = model.fit()
    print(f"Population regression for {year}:")
    print(result.summary())


gdp = pd.read_csv('gdp.csv', encoding='latin-1')
gdp.rename(columns={'Country Name': 'Country'}, inplace=True)
gdp = gdp.drop('Code', axis=1)
gdp_medals = pd.merge(gdp, medals, on='Country')  # Merge gdp and medals dataframes on 'Country' column
gdp_medals = gdp_medals.fillna(np.nan)

# GDP regression for each year
for year in years:
    x = gdp_medals[str(year)]
    y = gdp_medals[str(year) + 'medals']
    model = smf.ols(f"y ~ x", gdp_medals)
    result = model.fit()

    # Create QQ-plot
    smg.qqplot(result.resid, line='s')
    plt.title(f"QQ-plot for {year}")
    plt.text(0.05, 0.95, f"R-squared: {result.rsquared:.2f}", transform=plt.gca().transAxes, ha='left', va='top')
    plt.show()

    print(f"GDP regression for {year}:")
    print(result.summary())

# Create scatterplot for 1976
plt.scatter(gdp_medals['1976'], gdp_medals['1976medals'])
plt.title("Scatterplot for 1976")
plt.xlabel('GDP')
plt.ylabel('Medals')
plt.xscale('log')  # Set x-axis scale to log
plt.legend()
# Add prediction line
x_pred = np.linspace(min(gdp_medals['1976']), max(gdp_medals['1976']), 100)
y_pred = result.predict({'x': x_pred})
plt.plot(x_pred, y_pred, color='red', label='Prediction')
plt.show()

# Create scatterplot for 1980
plt.scatter(gdp_medals['1980'], gdp_medals['1980medals'])
plt.title("Scatterplot for 1980")
plt.xlabel('GDP')
plt.ylabel('Medals')
plt.xscale('log')  # Set x-axis scale to log
plt.legend()
# Add prediction line
x_pred = np.linspace(min(gdp_medals['1980']), max(gdp_medals['1980']), 100)
y_pred = result.predict({'x': x_pred})
plt.plot(x_pred, y_pred, color='red', label='Prediction')
plt.show()

# Create scatterplot for 2008
plt.scatter(gdp_medals['2008'], gdp_medals['2008medals'])
plt.title("Scatterplot for 2008")
plt.xlabel('GDP')
plt.ylabel('Medals')
plt.xscale('log')  # Set x-axis scale to log
plt.legend()
# Add prediction line
x_pred = np.linspace(min(gdp_medals['2008']), max(gdp_medals['2008']), 100)
y_pred = result.predict({'x': x_pred})
plt.plot(x_pred, y_pred, color='red', label='Prediction')
plt.show()

medals = pd.read_csv('Summer-Olympic-medals-1976-to-2008.csv', encoding='latin-1')
medals['Medal'] = medals['Medal'].replace({'Bronze': 1, 'Silver': 2, 'Gold': 3}) #medal weights with 3 being gold, 2 silver, 1 bronze
medals.drop_duplicates(subset=['Year', 'Sport', 'Event', 'Country'], keep='first', inplace=True)
medals = medals.drop(['City', 'Sport', 'Discipline', 'Event', 'Athlete', 'Gender', 'Event_gender', 'Country_Code'], axis=1)
medals = medals.groupby(['Year', 'Country']).sum().reset_index() #Combine rows where Year and Country are the same
medals = medals.pivot_table(index='Country', columns='Year', values='Medal', fill_value=0)
medals.columns = medals.columns.astype(int)
medals.columns = [str(col) + 'medals' for col in medals.columns]
medals['Total'] = medals.sum(axis=1) # Add a column named 'Total' that is the sum of the other 'medals' columns

medals_sorted = medals.sort_values(by='Total', ascending=False) #Use the ascending value to make it so it goes from highest to lowest
m=medals_sorted.head(20) #Get the top 20
plt.figure(figsize=(12, 8))
m['Total'].plot(kind='bar', color='blue') #Make plot and colors
plt.xlabel('Country') #All the titles
plt.ylabel('Total Medals')
plt.title('Total Medals Won by Country (Ordered)')
plt.xticks(rotation=90, ha='right') #Rotate numbers so they do not overlap each other
plt.show()

plt.figure(figsize=(12, 8))
plt.pie(m['Total'], labels=m.index, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Total Medals Among Top 20 Countries')
plt.show()

world_population = pd.read_csv('world_population.csv', index_col=0)
p_sorted = world_population.sort_values(by='2008', ascending=False)
p = p_sorted.iloc[1:21]


plt.figure(figsize=(12, 8))
p['2008'].plot(kind='bar', color='skyblue')
plt.xlabel('Country')
plt.ylabel('Population (2008)')
plt.title('Total Population Won by Country (Ordered)')
plt.xticks(rotation=90, ha='right')
plt.show()

plt.figure(figsize=(12, 8))
plt.pie(p['2008'], labels=p.index, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Population Among Top 20 Countries')
plt.show()

import matplotlib.pyplot as plt
top_gdp_2008 = gdp_medals[['Country', '2008']].sort_values(by='2008', ascending=False).head(20)
plt.figure(figsize=(12, 8))
plt.bar(top_gdp_2008['Country'], top_gdp_2008['2008'], color='blue')
plt.xlabel('Country')
plt.ylabel('GDP in 2008')
plt.title('Countries with Highest GDPs in 2008')
plt.xticks(rotation=45, ha='right')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
top_50_hdi = hdi_medals.sort_values(by='HDI Rank').head(50)
plt.figure(figsize=(12, 8))
plt.bar(top_50_hdi['Country'], top_50_hdi['2008'])
plt.xlabel('Country')
plt.ylabel('HDI Rank (2008)')
plt.title('HDI Rank in 2008 for Top 50 Ranked Countries')
plt.xticks(rotation=90, ha='right')
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
years = gdp_pc.columns[1:-1] #get all the columns
selected_countries = ['Soviet Union', 'United States', 'China', 'Germany', 'Australia', 'France', 'Italy', 'United Kingdom', 'Romania', 'Japan', 'Cuba', 'Hungary', 'Bulgaria', 'Poland', 'Canada', 'Netherlands', 'Spain', 'Sweden', 'Ukraine', 'New Zealand', 'Brazil', 'Norway', 'Greece', 'Denmark', 'Belarus', 'Finland', 'Switzerland', 'Turkey', 'Kazakhstan', 'Kenya', 'Czechoslovakia', 'Czech Republic', 'Korea, North', 'Jamaica', 'Belgium', 'Austria', 'Mexico', 'Slovakia', 'Iran', 'Thailand', 'Morocco', 'South Africa', 'Argentina', 'Ethiopia', 'West Germany', 'Russia', 'Soviet Union'] #A sample of countries within the top 50 medal countries
plt.figure(figsize=(12, 8))
for country in selected_countries:
    country_data = gdp_pc[gdp_pc['Country'] == country].iloc[:, 16:49].squeeze().interpolate(method='linear')  # the iloc and interpolate get these columns and help with cleaning data.Columns from 1976 to 2008
    if not country_data.empty:
        plt.plot(range(1976, 2009), country_data, label=country) #Take the gdp from all the years from 1976 to 2008
plt.xlabel('Year')
plt.ylabel('GDP per capita Value')
plt.title('GDP per capita Values Over the Years (1976-2008) for Selected Countries')
plt.xticks(rotation=90)
plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Countries', bbox_transform=plt.gcf().transFigure) #Make a legend and fit it
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
#Exact same thing as above but all use the cumsum to make the data progress with adding medals from the current and previous years
selected_countries = ['United States', 'Soviet Union', 'China', 'Russia', 'Germany', 'East Germany', 'Australia', 'France', 'Italy', 'United Kingdom', 'Romania', 'Japan', 'Korea, South', 'Cuba', 'Hungary', 'Bulgaria', 'Poland', 'Canada', 'Netherlands', 'West Germany', 'Spain', 'Unified team', 'Sweden', 'Ukraine', 'New Zealand', 'Brazil', 'Norway', 'Greece', 'Denmark', 'Yugoslavia', 'Belarus', 'Finland', 'Switzerland', 'Turkey', 'Kazakhstan', 'Kenya', 'Czechoslovakia', 'Czech Republic', 'Korea, North', 'Jamaica', 'Belgium', 'Austria', 'Mexico', 'Slovakia', 'Iran', 'Thailand', 'Morocco', 'South Africa', 'Argentina', 'Ethiopia']
plt.figure(figsize=(16, 8))
for country in selected_countries:
    country_data = medals.loc[country, :'2008medals'].cumsum().T
    plt.plot(country_data.index, country_data.values, label=country)
plt.xlabel('Year')
plt.ylabel('Cumulative Medal Count')
plt.title('Cumulative Medal Counts Over the Years for Selected Countries')
plt.xticks(rotation=90)
plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Countries', bbox_transform=plt.gcf().transFigure)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
#Same as before but with fewer countries to not make it too complicated
world_population = pd.read_csv('world_population.csv', index_col=0)
selected_countries = [
    'United States','China', 'Russian Federation', 'Germany',
    'Australia', 'France', 'Italy', 'United Kingdom', 'Romania',
    'Japan', 'Cuba', 'Hungary', 'Bulgaria', 'Poland',
    'Canada', 'Netherlands', 'Spain', 'Sweden', 'Ukraine',
    'New Zealand', 'Brazil', 'Norway', 'Greece', 'Denmark',
    'Belarus', 'Finland', 'Switzerland', 'Turkiye', 'Kazakhstan',
    'Kenya', 'Czechia', 'Korea, Rep.',
    'Jamaica', 'Belgium', 'Austria', 'Mexico', 'Slovak Republic',
    'Iran, Islamic Rep.', 'Thailand', 'Morocco', 'South Africa', 'Argentina',
    'Ethiopia'
]
population_data = world_population.loc[selected_countries, '1976':'2008'] #the .loc helps with locating all the countries in the df
plt.figure(figsize=(12, 8))
for country in selected_countries:
    country_data = population_data.loc[country].astype(float)
    plt.plot(country_data.index.astype(int), country_data, label=country)
plt.xlabel('Year')
plt.ylabel('Population (Billions)')
plt.title('Population of Selected Countries (1976-2008)')
plt.xticks(rotation=90)
plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Countries', bbox_transform=plt.gcf().transFigure)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
#Same as before but with the gdp
gdp = pd.read_csv('gdp.csv', index_col=0)
selected_countries = [
    'United States','China', 'Russian Federation', 'Germany',
    'Australia', 'France', 'Italy', 'United Kingdom', 'Romania',
    'Japan', 'Cuba', 'Hungary', 'Bulgaria', 'Poland',
    'Canada', 'Netherlands', 'Spain', 'Sweden', 'Ukraine',
    'New Zealand', 'Brazil', 'Norway', 'Greece', 'Denmark',
    'Belarus', 'Finland', 'Switzerland', 'Turkey', 'Kazakhstan',
    'Kenya', 'Czech Republic', 'Korea, Rep.',
    'Jamaica', 'Belgium', 'Austria', 'Mexico', 'Slovak Republic',
    'Iran, Islamic Rep.', 'Thailand', 'Morocco', 'South Africa', 'Argentina',
    'Ethiopia'
]
gdp_data = gdp.loc[selected_countries, '1976':'2008']
plt.figure(figsize=(12, 8))
for country in selected_countries:
    country_data = gdp_data.loc[country]
    plt.plot(country_data.index.astype(int), country_data, label=country)
plt.xlabel('Year')
plt.ylabel('GDP Value')
plt.title('GDP Values of Selected Countries (1976-2008)')
plt.xticks(rotation=90)
plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Countries', bbox_transform=plt.gcf().transFigure)
plt.tight_layout()
plt.show()

import seaborn as sns #Package for heatmap
selected_years = list(range(1976, 2009, 4)) #Make a list of selected years using the syntax of a for loop
for year in selected_years: #Use a for loop for each 4 years
    medals_year = medals.loc[selected_countries, f'{year}medals'] #Get the info from the specific year column from Pop. GDP and Medlas
    gdp_year = gdp.loc[selected_countries, f'{year}']
    population_year = world_population.loc[selected_countries, f'{year}']
    combined_data_year = pd.concat([medals_year, gdp_year, population_year], axis=1) #Concatinate the data
    combined_data_year.columns = ['Medals', 'GDP', 'Population'] #Make it these 3 variables
    plt.figure(figsize=(10, 8))
    sns.heatmap(combined_data_year.corr(), annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5) #Blue to red
    plt.title(f'Correlation Heatmap for {year}') #Heatmap for specific years
    plt.show()

selected_years = list(range(1976, 2009, 4)) #Every 4th year (olympic years)
correlation_matrices = {}
for year in selected_years: #Same as the heatmap, loop through and get every correlation matrix
    medals_year = medals.loc[selected_countries, f'{year}medals']
    gdp_year = gdp.loc[selected_countries, f'{year}'] #Get all of the values from specific years
    population_year = world_population.loc[selected_countries, f'{year}']
    combined_data_year = pd.concat([medals_year, gdp_year, population_year], axis=1) #Concatinate the data
    combined_data_year.columns = ['Medals', 'GDP', 'Population']
    correlation_matrix = combined_data_year.corr() #Function for the matrix
    correlation_matrices[year] = correlation_matrix
for year, matrix in correlation_matrices.items():
    print(f'Correlation Matrix for {year}:\n{matrix}\n{"="*40}\n') #Print every matrix

import seaborn as sns
import matplotlib.pyplot as plt
heatmap_data = hdi_medals[['HDI Rank', 'Total']]
plt.figure(figsize=(12, 8))
sns.heatmap(heatmap_data.corr(), annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)
plt.title('Correlation Heatmap: HDI Rank vs Total Medals')
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
selected_countries = ['United States','Soviet Union', 'China', 'Russia' ,'Germany', 'Australia', 'France', 'Italy', 'United Kingdom', 'Romania', 'Japan', 'Cuba', 'Hungary', 'Bulgaria', 'Poland', 'Canada', 'Netherlands', 'Spain', 'Sweden', 'Ukraine', 'New Zealand', 'Brazil', 'Norway', 'Greece', 'Denmark', 'Belarus', 'Finland', 'Switzerland', 'Turkey', 'Kazakhstan', 'Kenya', 'Czechoslovakia', 'Czech Republic', 'Korea, North', 'Jamaica', 'Belgium', 'Austria', 'Mexico', 'Slovakia', 'Iran', 'Thailand', 'Morocco', 'South Africa', 'Argentina', 'Ethiopia']
country_continents = {#These are the top 50 countries with the most medals
    'United States': 'North America', 'Soviet Union':'Asia', 'China': 'Asia', 'Russia': 'Asia', 'Germany': 'Europe', 'Australia': 'Oceania',
    'France': 'Europe', 'Italy': 'Europe', 'United Kingdom': 'Europe', 'Romania': 'Europe',
    'Japan': 'Asia', 'Cuba': 'North America', 'Hungary': 'Europe', 'Bulgaria': 'Europe',
    'Poland': 'Europe', 'Canada': 'North America', 'Netherlands': 'Europe', 'Spain': 'Europe',
    'Sweden': 'Europe', 'Ukraine': 'Europe', 'New Zealand': 'Oceania', 'Brazil': 'South America',
    'Norway': 'Europe', 'Greece': 'Europe', 'Denmark': 'Europe', 'Belarus': 'Europe',
    'Finland': 'Europe', 'Switzerland': 'Europe', 'Turkey': 'Asia', 'Kazakhstan': 'Asia',
    'Kenya': 'Africa', 'Czechoslovakia': 'Europe', 'Czech Republic': 'Europe',
    'Korea, North': 'Asia', 'Jamaica': 'North America', 'Belgium': 'Europe', 'Austria': 'Europe',
    'Mexico': 'North America', 'Slovakia': 'Europe', 'Iran': 'Asia', 'Thailand': 'Asia',
    'Morocco': 'Africa', 'South Africa': 'Africa', 'Argentina': 'South America', 'Ethiopia': 'Africa'
}
continent_counts = {}#A dictionary helps, I used ChatGPT to put in all the continents associated with each country because it would take a long time and repetitive for me to type it all
for country in selected_countries:
    continent = country_continents.get(country) #Get the country and the continent
    if continent:
        continent_counts[continent] = continent_counts.get(continent,0)+1 #Get the number of countries from each continent
plt.figure(figsize=(8, 8))
plt.pie(continent_counts.values(), labels=continent_counts.keys(), autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Selected Countries by Continent')
plt.show()